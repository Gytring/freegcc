<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[ShadowsocksR一键安装脚本（转）]]></title>
    <url>%2F2018%2F07%2F11%2FShadowsocksR%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[本脚本适用环境：系统支持：CentOS，Debian，Ubuntu内存要求：≥128M日期：2017 年 07 月 27 日关于本脚本：一键安装 ShadowsocksR 服务端。请下载与之配套的客户端程序来连接。（以下客户端只有 Windows 客户端和 Python 版客户端可以使用 SSR 新特性，其他原版客户端只能以兼容的方式连接 SSR 服务器） 默认配置：服务器端口：自己设定（如不设定，默认为 8989）密码：自己设定（如不设定，默认为 teddysun.com）加密方式：自己设定（如不设定，默认为 aes-256-cfb）协议（Protocol）：自己设定（如不设定，默认为 origin）混淆（obfs）：自己设定（如不设定，默认为 plain） 客户端下载：Windows / OS XLinuxAndroid / iOSOpenWRT 使用方法：使用root用户登录，运行以下命令： 123wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.shchmod +x shadowsocksR.sh./shadowsocksR.sh 2&gt;&amp;1 | tee shadowsocksR.log 安装完成后，脚本提示如下： 12345678910Congratulations, ShadowsocksR server install completed!Your Server IP :your_server_ipYour Server Port :your_server_portYour Password :your_passwordYour Protocol :your_protocolYour obfs :your_obfsYour Encryption Method:your_encryption_methodWelcome to visit:https://shadowsocks.be/9.htmlEnjoy it! 卸载方法：使用 root 用户登录，运行以下命令： 1./shadowsocksR.sh uninstall 安装完成后即已后台启动 ShadowsocksR ，运行： 1/etc/init.d/shadowsocks status 可以查看 ShadowsocksR 进程是否已经启动。本脚本安装完成后，已将 ShadowsocksR 自动加入开机自启动。 使用命令：启动：/etc/init.d/shadowsocks start停止：/etc/init.d/shadowsocks stop重启：/etc/init.d/shadowsocks restart状态：/etc/init.d/shadowsocks status 配置文件路径：/etc/shadowsocks.json日志文件路径：/var/log/shadowsocks.log代码安装目录：/usr/local/shadowsocks 多用户配置示例： 123456789101112131415161718192021&#123;&quot;server&quot;:&quot;0.0.0.0&quot;,&quot;server_ipv6&quot;: &quot;[::]&quot;,&quot;local_address&quot;:&quot;127.0.0.1&quot;,&quot;local_port&quot;:1080,&quot;port_password&quot;:&#123; &quot;8989&quot;:&quot;password1&quot;, &quot;8990&quot;:&quot;password2&quot;, &quot;8991&quot;:&quot;password3&quot;&#125;,&quot;timeout&quot;:300,&quot;method&quot;:&quot;aes-256-cfb&quot;,&quot;protocol&quot;: &quot;origin&quot;,&quot;protocol_param&quot;: &quot;&quot;,&quot;obfs&quot;: &quot;plain&quot;,&quot;obfs_param&quot;: &quot;&quot;,&quot;redirect&quot;: &quot;&quot;,&quot;dns_ipv6&quot;: false,&quot;fast_open&quot;: false,&quot;workers&quot;: 1&#125; 如果你想修改配置文件，请参考：https://github.com/shadowsocksr-backup/shadowsocks-rss/wiki/Server-Setuphttps://github.com/shadowsocksr-backup/shadowsocks-rss/blob/master/ssr.mdhttps://github.com/shadowsocksr-backup/shadowsocks-rss/wiki/config.json 更新日志：2017 年 07 月 27 日：1、新增：可选协议（protocol）auth_chain_b 。使用该协议需更新到最新版（4.7.0）ShadowsocksR 版客户端；2、修改：更新 ShadowsocksR 源码下载地址。 2017 年 07 月 22 日：1、新增：安装时可选 13 种加密方式的其中之一（none 是不加密）。如下所示： 1234567891011121314noneaes-256-cfbaes-192-cfbaes-128-cfbaes-256-cfb8aes-192-cfb8aes-128-cfb8aes-256-ctraes-192-ctraes-128-ctrchacha20-ietfchacha20rc4-md5rc4-md5-6 2、新增：安装时可选 7 种协议（protocol）的其中之一。如下所示： 12345678originverify_deflateauth_sha1_v4auth_sha1_v4_compatibleauth_aes128_md5auth_aes128_sha1auth_chain_aauth_chain_b 3、新增：安装时可选 9 种混淆（obfs）的其中之一。如下所示： 123456789plainhttp_simplehttp_simple_compatiblehttp_posthttp_post_compatibletls1.2_ticket_authtls1.2_ticket_auth_compatibletls1.2_ticket_fastauthtls1.2_ticket_fastauth_compatible 2016 年 08 月 13 日：1、新增多用户配置示例。注意：如果你新增了端口，也要将该端口从防火墙（iptables 或 firewalld）中打开。 2016 年 05 月 12 日：1、新增在 CentOS 下的防火墙规则设置。 参考链接：https://github.com/shadowsocksr-backup/shadowsocksr]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>Network，SSR</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于echo和重定向]]></title>
    <url>%2F2018%2F07%2F11%2F%E2%80%9D%E5%85%B3%E4%BA%8Eecho%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91%2F</url>
    <content type="text"><![CDATA[众所周知，在Linux使用echo并配合命令重定向是实现向文件中写入信息的快捷方式；本文介绍如何将echo命令与sudo命令配合使用，实现向只有系统管理员才有权限操作的文件中写入信息（本文以普通用户身份为例）。 比如向普通文件test文件中写入信息，可以 1echo "The first message write" &gt; test 或者追加写入 1echo "The second message" &gt;&gt; test 下面，如果将test权限设置为只有root用户才有权进行写操作 12sudo chown root.root testsudo chmod 644 test 我们使用sudo并配合echo命令再次向修改权限之后的test文件中写入信息： 1sudo echo "The third message write" &gt;&gt; test 此时，会提示出错信息 1-bash: test: Permission denied bash拒绝这么做，原因是权限不够。这是因为重定向符号“&gt;”和”&gt;&gt;”也是bash命令。当我们使用sudo只是让echo命令具有了root权限，但并没有让”&gt;”和”&gt;&gt;”命令也酷游root权限，所以bash会认为这两个命令没有向test文件写入信息的权限。 为了解决这个问题，通常有两这方式。第一种是利用”sh -c”命令，它可以让bash将一个字符串作为完整的命令来执行，这样就可以将sudo的影响范围拓展到整条命令，具体方法如下： 1sudo sh -c 'echo "The fourth message write" &gt;&gt; test' 另一种方法利用管道和tee命令，该命令可以从标准输入中读入信息并将其写入标准输出或文件中，具体用法如下： 1echo "The fifth message write" | sudo test -a test 注意，tee命令的’-a’选项的作用等同于”&gt;&gt;”命令”&gt;&gt;”,如果去除该选项，那么tee命令的作用等同于”&gt;”命令。 本人最初是在linux上清理内存是遇到这个问题的，附上清理内存的命令 1sudo bash -c "echo 3 &gt; /proc/sys/vm/drop_caches" 最后附上一个vim技巧，当你编辑一个read only文件时，可以在vim中使用如下命令保存对文件的更改： 1:w !sudo tee %]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[登陆shell和非登陆shell的区别以及配置文件加载顺序]]></title>
    <url>%2F2018%2F07%2F09%2F%E7%99%BB%E9%99%86shell%E5%92%8C%E9%9D%9E%E7%99%BB%E9%99%86shell%E7%9A%84%E5%8C%BA%E5%88%AB%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[在Linux根据用户使用shell的情况可以分为登陆shell和非登陆shell，还有交互式shell和非交互式shell。 登陆shell是指用户使用shell时需要输入用户名和密码登陆，比如从某终端登陆，或者通过su - USERNAME、su -l USERNAME的方式登陆； 非登陆shell则指不需要用户名和密码即可使用shell，比如在图形界面下打开终端窗口，运行的shell脚本，su USERNAME。 交互式shell就是shell在等待你的输入，键入回车后立马执行你提交的命令。这种模式被称作交互式是因为shell与用户进行交互。这种模式也是大多数用户非常熟悉的：登录、执行一些命令、退出，当你退出后，shell自然就终止了，还有一种情况就是执行shell脚本时需要用户进行输入。 非交互式shell基本就是执行不需要输入任何信息shell脚本，shell和用户之间交互，而是读取存放在文件中的命令,并且执行它们。当它读到文件的结尾EOF，shell也就终止了 以bash为例，说一说shell的配置文件 全局配置文件： ​ /etc/profile /etc/profile.d/*.sh /etc/bashrc 用户个人配置文件： ​ ~/.bash_profile ~/.bashrc profile类的文件主要用于： 设定环境变量 、运行命令或脚本 bashrc类的文件则主要同于设定本地变量、定义命令别名 当用户使用登陆shell时，shell会按以下的顺序去加载配置文件： ​ /etc/profile –&gt; /etc/profile.d/*sh –&gt; ~/.bash_profile –&gt; ~/.bashrc –&gt; /etc/bashrc 当用户使用非登陆shell时，shell的配置文件加载顺序变为： ​ ~/.bashrc –&gt; /etc/bashrc –&gt; /etc/profile.d/*.sh]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
</search>
